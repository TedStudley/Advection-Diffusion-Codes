{
  VectorXd u (N * N);
  VectorXd u1 (N * N);
  VectorXd utemp (N * N);

  double t       = 0;
  double h       = 1.0 / (N + 1);
  double delta_t = mu * h / kappa;

  init_timestep (delta_t, T);

  squareWave (u1);
  squareWave (u);
  backwardEuler (u, delta_t, h, kappa);

  t = 0;

  for (; t < T;) {
    utemp = u;
    BDF2 (u, u1, delta_t, h, kappa);
    u1 = utemp;
    t += delta_t;
  }

  fourierSquare (utemp, kappa, t);

  VectorXd error = (u - utemp);

  cerr << N << " " << maxNorm (error)
            << " " << twoNorm (error) << endl;
}
